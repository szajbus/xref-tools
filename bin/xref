#!/bin/bash

me=`basename "$0"`

function help() {
  cat << EOF
Dependency analysis tool for mix projects via \`mix xref\` task

Usage:
  $me <command> [<args>]

Available commands:
  list <source>             List direct dependencies of source file
  subtree <source>          Calculate subtree sizes of source file's dependencies

Common options (optional):
  --include <pattern>                 Include only dependencies matching pattern
  --exclude <pattern>                 Exclude dependencies matching pattern
  --label <compile|export|runtime>    Include only dependencies of certain type

EOF
}

DIRECT_DEP_REGEX="^[├└]"
LABEL_REGEX="."
REMOVE_EDGES="s/^[^[:alpha:]]+//"
REMOVE_FILE="s/^[^\(]+//"
REMOVE_LABEL="s/\(.+\)$//"
ADD_RUNTIME_LABEL="s/([^)])$/\1 (runtime)/"
LABEL=""
INCLUDE="."
EXCLUDE="__NOTHING_TO_EXCLUDE__"
POSITIONAL=()

while [[ $# -gt 0 ]]; do
  arg="$1"

  case $arg in
    -l|--label)
      LABEL="$2"
      LABEL_REGEX="(${LABEL})$"
      shift; shift
      ;;
    -i|--include)
      INCLUDE="$2"
      shift; shift
      ;;
    -x|--exclude)
      EXCLUDE="$2"
      shift; shift
      ;;
    -h|--help)
      CMD="help"; shift
      ;;
    *)
      if [[ -z $CMD ]]; then
        CMD="$1";
      else
        POSITIONAL+=("$1")
      fi

      shift
    ;;
  esac
done

CMD=${CMD:-help}
set -- "${POSITIONAL[@]}"
SOURCE=$1

function get_deps() {
  mix xref graph --no-compile --source $1 \
    | grep "$DIRECT_DEP_REGEX" \
    | sed -r "$ADD_RUNTIME_LABEL" \
    | sed -r "$REMOVE_EDGES" \
    | grep "$LABEL_REGEX" \
    | grep "$INCLUDE" \
    | grep -v "$EXCLUDE" \
    | sort | uniq
}

function get_tree_size() {
  mix xref graph --no-compile --source $1 \
    | sed -r "$REMOVE_EDGES" \
    | sed -r "$REMOVE_LABEL" \
    | sort | uniq | wc -l
}

function get_file() {
  echo $1 | sed -r "$REMOVE_LABEL"
}

function get_label() {
  echo $1 | sed -r "$REMOVE_FILE"
}

case $CMD in
  help)
    help
    ;;
  list)
    cat << EOF
Listing direct dependencies (${LABEL:-all}) of ${SOURCE}

EOF

    set -- $(get_deps $SOURCE)

    while [[ $# -gt 0 ]]; do
      file=$1
      label=$2
      shift; shift

      echo "$file $label"
    done
    ;;
  subtree)
    cat << EOF
Analyzing direct dependencies (${LABEL:-all}) of ${SOURCE}

Calculating subtree size of each dependency.
For compile dependencies, if any file in the subtree changes,
${SOURCE} would need to be recompiled.

Pay attention to large subtrees as they _may_ indicate potential
issues with your code. Investigating them further and possibly
eliminating some unnecessary dependencies in such subtrees may
yield substantial benefits to your project's recompilation.

 size | dependency
------|------------
EOF

    set -- $(get_deps $SOURCE)

    while [[ $# -gt 0 ]]; do
      file=$1
      label=$2
      shift; shift

      printf %5s $(get_tree_size $file)
      echo " | $file $label"
    done

    ;;
  *)
    echo "Unknown command: $CMD"
    echo
    help
    exit 1
esac
